这个问题我倾向于分两方面回答：了解方向现状 和 学会，注意这两个之间没有特别必然的联系。
1.【了解现状】没有什么好说的，看论文，之前有人提到了，CVPR啊什么的顶级会议，去看就好了，但有个细节注意下，不用下他说得那样有基础，为什么，因为其实那点基础对你帮助不大，终归都是看趋势
2.【学会】想学会就不要大量看论文，看书，记得这样一句话：论文上的东西，3、5年之后可能都已经过时了，但留在书上都都是经得住考验的，过很多年也缩水不多的。技术这个东西，你不要把它看成【工具箱】，里面有很多个不同的工具，什么深度学习啊、SVM、稀疏啊都是可以用的工具。这个观点会延误你的学习的。推荐的观点是，把技术看成是【原理】和【方案】。
原理是什么？很多搞这个的都分不清，其实我问一个简单的问题就可以了：
我们一直都在用【方差】表示误差，为什么是平方和，而不是绝对值和或4次方和？
如果你立刻就能答出来是因为高斯分布，那很可能就代表你明白了大部分相关的学习方法的根本性原理了。
这就是【原理】（中最简单的一个），主导者各种算法的基础，也是让你学习新算法时轻松愉快的基础。这通常分成了两个大的部分，【模型描述】和【求解】，术业有专攻，到在这里，一般的研究生可以根据背景二选一作为主攻，另一个只做充分了解了。
【方案】方面，就是那些被人们整理成型的，具有直接应用价值的办法，就好像编程中学到的<快速排序算法>，是个成型的方法，是分治等一些列原理的集合体。方案上，我们可以得创新非常多，有些是通用的，这些最终会留在教科书上，比如SVM；有些是领域相关的；而有些，就是具体问题相关的，当然，绝大部分论文的创新，其实就是针对具体环境的方案变化。
当然，最后还有【应用】这个有趣的方向，其核心知识除了CV本身，还有”工学素养“这样比较靠积累（也比较玄乎）的东西，这里就先坑着了，如果有机会再来填坑。
3.【毕业、论文】这个单独拿出来提一下，为什么，因为【学会】就像小说里面的内功，你研究生毕业的时候，这个内功未必能发挥出多少威力，到时候你毕业成问题找我就不好了。这里推荐的办法是之前看到于仕琪（不认识？看看你OPENCV书的封面就知道了）带学生时候的方法，我觉得不错，这里稍作调整拿来分享：拿一篇优秀的、和你要做的方向一致的论文，完完全全、一模一样的实现出来、并充分的调试、测试。期间不要想什么创新、改进，先去理解作者每一步到底是为什么。然后？然后他的学生自然就找到了【合理的】改进方案，自己写论文去了。
为什么要这样？因为，看论文就和看开源库一样，一般水平的人根本不可能看懂门道，你看到的也几乎不是问题的核心。靠这样学习就是自欺欺人。你不亲自实现一次、亲自在各种情况下测试一次，是学不会的。